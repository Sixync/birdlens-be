services:
  birdlens-db:
    image: postgres:17.5
    ports:
      - "5431:5432"
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: birdlens
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - birdlens-network

  birdlens-be:
    build:
      context: ./
      dockerfile: Dockerfile
    depends_on:
      - birdlens-db
    restart: always
    environment:
      DB_ADDR: postgres://admin:password@birdlens-db:5432/birdlens?sslmode=disable
      HTTP_PORT: 6969
      ENV: "dev"
      ACCESS_TOKEN_EXP_MIN: 10
      REFRESH_TOKEN_EXP_DAY : 14
      PATH_TO_FIREBASE_CREDS: /env/birdlens-creds.json
    deploy:
      mode: replicated
      replicas: 3
    networks:
      - birdlens-network

  migrate:
    image: migrate/migrate:4
    volumes:
      - ./cmd/migrate/migrations/:/migrations
    command: [ "-path", "/migrations", "-database", "postgres://${DB_USER}:${DB_PASSWORD}@birdlens-db:5432/birdlens?sslmode=disable", "up" ]
    depends_on:
      - birdlens-db
      - birdlens-be
    networks:
      - birdlens-network

  nginx:
    image: nginx:1.27
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - birdlens-be
    restart: always
    networks:
      - birdlens-network

  jenkins-birdlens:
    image: jenkins/jenkins:jdk21
    privileged: true
    user: root
    container_name: jenkins-container
    ports:
      - "8081:8080"
      - "50000:50000"
    volumes:
      - /home/$(myname)/jenkins_compose/jenkins_configuration/:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - birdlens-network

  jenkin-agent:
    image: jenkins/inbound-agent
    container_name: jenkins-agent
    depends_on:
      - jenkins-birdlens
    environment:
      JENKINS_URL: http://jenkins-birdlens:8080
      JENKINS_AGENT_NAME: "birdlens-agent"
      JENKINS_SECRET: ${AGENT_SECRET}
    networks:
      - birdlens-network

volumes:
  db-data:

networks:
  birdlens-network:
    external: true
